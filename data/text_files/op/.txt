2403-2404 [)]
0-139 [﻿Welcome to Apache UIMA (Unstructured Information Management Architecture), a incubator project of the  Apache Software Foundation (ASF). 
]
0-8 [﻿Welcome]
9-11 [to]
12-23 [Apache UIMA]
12-18 [Apache]
19-23 [UIMA]
24-25 [(]
25-73 [Unstructured Information Management Architecture]
25-37 [Unstructured]
38-49 [Information]
50-60 [Management]
61-73 [Architecture]
73-74 [)]
74-75 [,]
76-77 [a]
78-87 [incubator]
88-95 [project]
96-98 [of]
99-102 [the]
104-130 [Apache Software Foundation]
104-110 [Apache]
111-119 [Software]
120-130 [Foundation]
131-132 [(]
132-135 [ASF]
135-136 [)]
136-137 [.]
139-305 [Our goal is a thriving community of users and developers of UIMA frameworks, supporting components for analysing unstructured content such as text, audio and video.

]
139-142 [Our]
143-147 [goal]
148-150 [is]
151-152 [a]
153-161 [thriving]
162-171 [community]
172-174 [of]
175-180 [users]
181-184 [and]
185-195 [developers]
196-198 [of]
199-203 [UIMA]
204-214 [frameworks]
214-215 [,]
216-226 [supporting]
227-237 [components]
238-241 [for]
242-251 [analysing]
252-264 [unstructured]
265-272 [content]
273-277 [such]
278-280 [as]
281-285 [text]
285-286 [,]
287-292 [audio]
293-296 [and]
297-302 [video]
302-303 [.]
305-320 [What is UIMA?

]
305-309 [What]
310-312 [is]
313-317 [UIMA]
317-318 [?]
320-510 [Unstructured Information Management applications are software systems that analyze large volumes of unstructured information in order to discover knowledge that is relevant to an end user. 
]
320-355 [Unstructured Information Management]
320-332 [Unstructured]
333-344 [Information]
345-355 [Management]
356-368 [applications]
369-372 [are]
373-381 [software]
382-389 [systems]
390-394 [that]
395-402 [analyze]
403-408 [large]
409-416 [volumes]
417-419 [of]
420-432 [unstructured]
433-444 [information]
445-447 [in]
448-453 [order]
454-456 [to]
457-465 [discover]
466-475 [knowledge]
476-480 [that]
481-483 [is]
484-492 [relevant]
493-495 [to]
496-498 [an]
499-502 [end]
503-507 [user]
507-508 [.]
510-572 [UIMA is a framework and SDK for developing such applications. ]
510-514 [UIMA]
515-517 [is]
518-519 [a]
520-529 [framework]
530-533 [and]
534-537 [SDK]
538-541 [for]
542-552 [developing]
553-557 [such]
558-570 [applications]
570-571 [.]
572-734 [An example UIM application might ingest plain text and identify entities, such as persons, places, organizations; or relations, such as works-for or located-at. 
]
572-574 [An]
575-582 [example]
583-586 [UIM]
587-598 [application]
599-604 [might]
605-611 [ingest]
612-617 [plain]
618-622 [text]
623-626 [and]
627-635 [identify]
636-644 [entities]
644-645 [,]
646-650 [such]
651-653 [as]
654-661 [persons]
661-662 [,]
663-669 [places]
669-670 [,]
671-684 [organizations]
684-685 [;]
686-688 [or]
689-698 [relations]
698-699 [,]
700-704 [such]
705-707 [as]
708-717 [works-for]
718-720 [or]
721-731 [located-at]
731-732 [.]
734-958 [UIMA enables such an application to be decomposed into components, for example "language identification" -> "language specific segmentation" -> "sentence boundary detection" -> "entity detection (person/place names etc.)". 
]
734-738 [UIMA]
739-746 [enables]
747-751 [such]
752-754 [an]
755-766 [application]
767-769 [to]
770-772 [be]
773-783 [decomposed]
784-788 [into]
789-799 [components]
799-800 [,]
801-804 [for]
805-812 [example]
813-814 ["]
814-822 [language]
823-837 [identification]
837-838 ["]
839-840 [-]
840-841 [>]
842-843 ["]
843-851 [language]
852-860 [specific]
861-873 [segmentation]
873-874 ["]
875-876 [-]
876-877 [>]
878-879 ["]
879-887 [sentence]
888-896 [boundary]
897-906 [detection]
906-907 ["]
908-909 [-]
909-910 [>]
911-912 ["]
912-918 [entity]
919-928 [detection]
929-930 [(]
930-936 [person]
936-937 [/]
937-942 [place]
943-948 [names]
949-952 [etc]
952-953 [.]
953-954 [)]
954-955 ["]
955-956 [.]
958-1092 [Each component must implement interfaces defined by the framework and must provide self-describing metadata via XML descriptor files. ]
958-962 [Each]
963-972 [component]
973-977 [must]
978-987 [implement]
988-998 [interfaces]
999-1006 [defined]
1007-1009 [by]
1010-1013 [the]
1014-1023 [framework]
1024-1027 [and]
1028-1032 [must]
1033-1040 [provide]
1041-1056 [self-describing]
1057-1065 [metadata]
1066-1069 [via]
1070-1073 [XML]
1074-1084 [descriptor]
1085-1090 [files]
1090-1091 [.]
1092-1163 [The framework manages these components and the data flow between them. ]
1092-1095 [The]
1096-1105 [framework]
1106-1113 [manages]
1114-1119 [these]
1120-1130 [components]
1131-1134 [and]
1135-1138 [the]
1139-1143 [data]
1144-1148 [flow]
1149-1156 [between]
1157-1161 [them]
1161-1162 [.]
1163-1301 [Components are written in Java or C++; the data that flows between components is designed for efficient mapping between these languages. 
]
1163-1173 [Components]
1174-1177 [are]
1178-1185 [written]
1186-1188 [in]
1189-1193 [Java]
1194-1196 [or]
1197-1198 [C]
1198-1199 [+]
1199-1200 [+]
1200-1201 [;]
1202-1205 [the]
1206-1210 [data]
1211-1215 [that]
1216-1221 [flows]
1222-1229 [between]
1230-1240 [components]
1241-1243 [is]
1244-1252 [designed]
1253-1256 [for]
1257-1266 [efficient]
1267-1274 [mapping]
1275-1282 [between]
1283-1288 [these]
1289-1298 [languages]
1298-1299 [.]
1301-1489 [UIMA additionally provides capabilities to wrap components as network services, and can scale to very large volumes by replicating processing pipelines over a cluster of networked nodes.

]
1301-1305 [UIMA]
1306-1318 [additionally]
1319-1327 [provides]
1328-1340 [capabilities]
1341-1343 [to]
1344-1348 [wrap]
1349-1359 [components]
1360-1362 [as]
1363-1370 [network]
1371-1379 [services]
1379-1380 [,]
1381-1384 [and]
1385-1388 [can]
1389-1394 [scale]
1395-1397 [to]
1398-1402 [very]
1403-1408 [large]
1409-1416 [volumes]
1417-1419 [by]
1420-1431 [replicating]
1432-1442 [processing]
1443-1452 [pipelines]
1453-1457 [over]
1458-1459 [a]
1460-1467 [cluster]
1468-1470 [of]
1471-1480 [networked]
1481-1486 [nodes]
1486-1487 [.]
1489-1706 [Apache UIMA is an Apache-licensed open source implementation of the UIMA specification (that specification is, in turn, being developed concurrently by a technical committee within OASIS , a standards organization). 
]
1489-1500 [Apache UIMA]
1489-1495 [Apache]
1496-1500 [UIMA]
1501-1503 [is]
1504-1506 [an]
1507-1522 [Apache-licensed]
1523-1527 [open]
1528-1534 [source]
1535-1549 [implementation]
1550-1552 [of]
1553-1556 [the]
1557-1561 [UIMA]
1562-1575 [specification]
1576-1577 [(]
1577-1581 [that]
1582-1595 [specification]
1596-1598 [is]
1598-1599 [,]
1600-1602 [in]
1603-1607 [turn]
1607-1608 [,]
1609-1614 [being]
1615-1624 [developed]
1625-1637 [concurrently]
1638-1640 [by]
1641-1642 [a]
1643-1652 [technical]
1653-1662 [committee]
1663-1669 [within]
1670-1675 [OASIS]
1676-1677 [,]
1678-1679 [a]
1680-1689 [standards]
1690-1702 [organization]
1702-1703 [)]
1703-1704 [.]
1706-1804 [We invite and encourage you to participate in both the implementation and specification efforts.

]
1706-1708 [We]
1709-1715 [invite]
1716-1719 [and]
1720-1729 [encourage]
1730-1733 [you]
1734-1736 [to]
1737-1748 [participate]
1749-1751 [in]
1752-1756 [both]
1757-1760 [the]
1761-1775 [implementation]
1776-1779 [and]
1780-1793 [specification]
1794-1801 [efforts]
1801-1802 [.]
1804-1901 [UIMA is a component framework for analysing unstructured content such as text, audio and video. 
]
1804-1808 [UIMA]
1809-1811 [is]
1812-1813 [a]
1814-1823 [component]
1824-1833 [framework]
1834-1837 [for]
1838-1847 [analysing]
1848-1860 [unstructured]
1861-1868 [content]
1869-1873 [such]
1874-1876 [as]
1877-1881 [text]
1881-1882 [,]
1883-1888 [audio]
1889-1892 [and]
1893-1898 [video]
1898-1899 [.]
1901-2051 [It comprises an SDK and tooling for composing and running analytic components written in Java and C++, with some support for Perl, Python and TCL. 


]
1901-1903 [It]
1904-1913 [comprises]
1914-1916 [an]
1917-1920 [SDK]
1921-1924 [and]
1925-1932 [tooling]
1933-1936 [for]
1937-1946 [composing]
1947-1950 [and]
1951-1958 [running]
1959-1967 [analytic]
1968-1978 [components]
1979-1986 [written]
1987-1989 [in]
1990-1994 [Java]
1995-1998 [and]
1999-2000 [C]
2000-2001 [+]
2001-2002 [+]
2002-2003 [,]
2004-2008 [with]
2009-2013 [some]
2014-2021 [support]
2022-2025 [for]
2026-2030 [Perl]
2030-2031 [,]
2032-2038 [Python]
2039-2042 [and]
2043-2046 [TCL]
2046-2047 [.]
2051-2405 [Apache UIMA mailing lists:

Users - uima-user@incubator.apache.org
Developers - uima-dev@incubator.apache.org
Commits - uima-commits@incubator.apache.org


Apache UIMA project committers:

Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor


Apache UIMA project Mentors:

Ken Coar (ASF member and Vice President)
Sam Ruby (ASF member)
]
2051-2062 [Apache UIMA]
2051-2057 [Apache]
2058-2062 [UIMA]
2063-2070 [mailing]
2071-2076 [lists]
2076-2077 [:]
2079-2084 [Users]
2085-2086 [-]
2087-2117 [uima-user@incubator.apache.org]
2087-2096 [uima-user]
2096-2097 [@]
2097-2117 [incubator.apache.org]
2118-2128 [Developers]
2129-2130 [-]
2131-2160 [uima-dev@incubator.apache.org]
2131-2139 [uima-dev]
2139-2140 [@]
2140-2160 [incubator.apache.org]
2161-2168 [Commits]
2169-2170 [-]
2171-2204 [uima-commits@incubator.apache.org]
2171-2183 [uima-commits]
2183-2184 [@]
2184-2204 [incubator.apache.org]
2207-2218 [Apache UIMA]
2207-2213 [Apache]
2214-2218 [UIMA]
2219-2226 [project]
2227-2237 [committers]
2237-2238 [:]
2240-2309 [Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor]
2240-2247 [Michael]
2248-2256 [Baessler]
2257-2263 [Edward]
2264-2271 [Epstein]
2272-2277 [Thilo]
2278-2283 [Goetz]
2284-2288 [Adam]
2289-2294 [Lally]
2295-2303 [Marshall]
2304-2309 [Schor]
2312-2323 [Apache UIMA]
2312-2318 [Apache]
2319-2323 [UIMA]
2324-2331 [project]
2332-2339 [Mentors]
2339-2340 [:]
2342-2350 [Ken Coar]
2342-2345 [Ken]
2346-2350 [Coar]
2351-2352 [(]
2352-2355 [ASF]
2356-2362 [member]
2363-2366 [and]
2367-2381 [Vice President]
2367-2381 [Vice President]
2367-2371 [Vice]
2372-2381 [President]
2372-2381 [President]
2381-2382 [)]
2383-2391 [Sam Ruby]
2383-2386 [Sam]
2387-2391 [Ruby]
2392-2393 [(]
2393-2396 [ASF]
2397-2403 [member]
2403-2404 [)]
0-139 [﻿Welcome to Apache UIMA (Unstructured Information Management Architecture), a incubator project of the  Apache Software Foundation (ASF). 
]
0-8 [﻿Welcome]
9-11 [to]
12-23 [Apache UIMA]
12-18 [Apache]
19-23 [UIMA]
24-25 [(]
25-73 [Unstructured Information Management Architecture]
25-37 [Unstructured]
38-49 [Information]
50-60 [Management]
61-73 [Architecture]
73-74 [)]
74-75 [,]
76-77 [a]
78-87 [incubator]
88-95 [project]
96-98 [of]
99-102 [the]
104-130 [Apache Software Foundation]
104-110 [Apache]
111-119 [Software]
120-130 [Foundation]
131-132 [(]
132-135 [ASF]
135-136 [)]
136-137 [.]
139-305 [Our goal is a thriving community of users and developers of UIMA frameworks, supporting components for analysing unstructured content such as text, audio and video.

]
139-142 [Our]
143-147 [goal]
148-150 [is]
151-152 [a]
153-161 [thriving]
162-171 [community]
172-174 [of]
175-180 [users]
181-184 [and]
185-195 [developers]
196-198 [of]
199-203 [UIMA]
204-214 [frameworks]
214-215 [,]
216-226 [supporting]
227-237 [components]
238-241 [for]
242-251 [analysing]
252-264 [unstructured]
265-272 [content]
273-277 [such]
278-280 [as]
281-285 [text]
285-286 [,]
287-292 [audio]
293-296 [and]
297-302 [video]
302-303 [.]
305-320 [What is UIMA?

]
305-309 [What]
310-312 [is]
313-317 [UIMA]
317-318 [?]
320-510 [Unstructured Information Management applications are software systems that analyze large volumes of unstructured information in order to discover knowledge that is relevant to an end user. 
]
320-355 [Unstructured Information Management]
320-332 [Unstructured]
333-344 [Information]
345-355 [Management]
356-368 [applications]
369-372 [are]
373-381 [software]
382-389 [systems]
390-394 [that]
395-402 [analyze]
403-408 [large]
409-416 [volumes]
417-419 [of]
420-432 [unstructured]
433-444 [information]
445-447 [in]
448-453 [order]
454-456 [to]
457-465 [discover]
466-475 [knowledge]
476-480 [that]
481-483 [is]
484-492 [relevant]
493-495 [to]
496-498 [an]
499-502 [end]
503-507 [user]
507-508 [.]
510-572 [UIMA is a framework and SDK for developing such applications. ]
510-514 [UIMA]
515-517 [is]
518-519 [a]
520-529 [framework]
530-533 [and]
534-537 [SDK]
538-541 [for]
542-552 [developing]
553-557 [such]
558-570 [applications]
570-571 [.]
572-734 [An example UIM application might ingest plain text and identify entities, such as persons, places, organizations; or relations, such as works-for or located-at. 
]
572-574 [An]
575-582 [example]
583-586 [UIM]
587-598 [application]
599-604 [might]
605-611 [ingest]
612-617 [plain]
618-622 [text]
623-626 [and]
627-635 [identify]
636-644 [entities]
644-645 [,]
646-650 [such]
651-653 [as]
654-661 [persons]
661-662 [,]
663-669 [places]
669-670 [,]
671-684 [organizations]
684-685 [;]
686-688 [or]
689-698 [relations]
698-699 [,]
700-704 [such]
705-707 [as]
708-717 [works-for]
718-720 [or]
721-731 [located-at]
731-732 [.]
734-958 [UIMA enables such an application to be decomposed into components, for example "language identification" -> "language specific segmentation" -> "sentence boundary detection" -> "entity detection (person/place names etc.)". 
]
734-738 [UIMA]
739-746 [enables]
747-751 [such]
752-754 [an]
755-766 [application]
767-769 [to]
770-772 [be]
773-783 [decomposed]
784-788 [into]
789-799 [components]
799-800 [,]
801-804 [for]
805-812 [example]
813-814 ["]
814-822 [language]
823-837 [identification]
837-838 ["]
839-840 [-]
840-841 [>]
842-843 ["]
843-851 [language]
852-860 [specific]
861-873 [segmentation]
873-874 ["]
875-876 [-]
876-877 [>]
878-879 ["]
879-887 [sentence]
888-896 [boundary]
897-906 [detection]
906-907 ["]
908-909 [-]
909-910 [>]
911-912 ["]
912-918 [entity]
919-928 [detection]
929-930 [(]
930-936 [person]
936-937 [/]
937-942 [place]
943-948 [names]
949-952 [etc]
952-953 [.]
953-954 [)]
954-955 ["]
955-956 [.]
958-1092 [Each component must implement interfaces defined by the framework and must provide self-describing metadata via XML descriptor files. ]
958-962 [Each]
963-972 [component]
973-977 [must]
978-987 [implement]
988-998 [interfaces]
999-1006 [defined]
1007-1009 [by]
1010-1013 [the]
1014-1023 [framework]
1024-1027 [and]
1028-1032 [must]
1033-1040 [provide]
1041-1056 [self-describing]
1057-1065 [metadata]
1066-1069 [via]
1070-1073 [XML]
1074-1084 [descriptor]
1085-1090 [files]
1090-1091 [.]
1092-1163 [The framework manages these components and the data flow between them. ]
1092-1095 [The]
1096-1105 [framework]
1106-1113 [manages]
1114-1119 [these]
1120-1130 [components]
1131-1134 [and]
1135-1138 [the]
1139-1143 [data]
1144-1148 [flow]
1149-1156 [between]
1157-1161 [them]
1161-1162 [.]
1163-1301 [Components are written in Java or C++; the data that flows between components is designed for efficient mapping between these languages. 
]
1163-1173 [Components]
1174-1177 [are]
1178-1185 [written]
1186-1188 [in]
1189-1193 [Java]
1194-1196 [or]
1197-1198 [C]
1198-1199 [+]
1199-1200 [+]
1200-1201 [;]
1202-1205 [the]
1206-1210 [data]
1211-1215 [that]
1216-1221 [flows]
1222-1229 [between]
1230-1240 [components]
1241-1243 [is]
1244-1252 [designed]
1253-1256 [for]
1257-1266 [efficient]
1267-1274 [mapping]
1275-1282 [between]
1283-1288 [these]
1289-1298 [languages]
1298-1299 [.]
1301-1489 [UIMA additionally provides capabilities to wrap components as network services, and can scale to very large volumes by replicating processing pipelines over a cluster of networked nodes.

]
1301-1305 [UIMA]
1306-1318 [additionally]
1319-1327 [provides]
1328-1340 [capabilities]
1341-1343 [to]
1344-1348 [wrap]
1349-1359 [components]
1360-1362 [as]
1363-1370 [network]
1371-1379 [services]
1379-1380 [,]
1381-1384 [and]
1385-1388 [can]
1389-1394 [scale]
1395-1397 [to]
1398-1402 [very]
1403-1408 [large]
1409-1416 [volumes]
1417-1419 [by]
1420-1431 [replicating]
1432-1442 [processing]
1443-1452 [pipelines]
1453-1457 [over]
1458-1459 [a]
1460-1467 [cluster]
1468-1470 [of]
1471-1480 [networked]
1481-1486 [nodes]
1486-1487 [.]
1489-1706 [Apache UIMA is an Apache-licensed open source implementation of the UIMA specification (that specification is, in turn, being developed concurrently by a technical committee within OASIS , a standards organization). 
]
1489-1500 [Apache UIMA]
1489-1495 [Apache]
1496-1500 [UIMA]
1501-1503 [is]
1504-1506 [an]
1507-1522 [Apache-licensed]
1523-1527 [open]
1528-1534 [source]
1535-1549 [implementation]
1550-1552 [of]
1553-1556 [the]
1557-1561 [UIMA]
1562-1575 [specification]
1576-1577 [(]
1577-1581 [that]
1582-1595 [specification]
1596-1598 [is]
1598-1599 [,]
1600-1602 [in]
1603-1607 [turn]
1607-1608 [,]
1609-1614 [being]
1615-1624 [developed]
1625-1637 [concurrently]
1638-1640 [by]
1641-1642 [a]
1643-1652 [technical]
1653-1662 [committee]
1663-1669 [within]
1670-1675 [OASIS]
1676-1677 [,]
1678-1679 [a]
1680-1689 [standards]
1690-1702 [organization]
1702-1703 [)]
1703-1704 [.]
1706-1804 [We invite and encourage you to participate in both the implementation and specification efforts.

]
1706-1708 [We]
1709-1715 [invite]
1716-1719 [and]
1720-1729 [encourage]
1730-1733 [you]
1734-1736 [to]
1737-1748 [participate]
1749-1751 [in]
1752-1756 [both]
1757-1760 [the]
1761-1775 [implementation]
1776-1779 [and]
1780-1793 [specification]
1794-1801 [efforts]
1801-1802 [.]
1804-1901 [UIMA is a component framework for analysing unstructured content such as text, audio and video. 
]
1804-1808 [UIMA]
1809-1811 [is]
1812-1813 [a]
1814-1823 [component]
1824-1833 [framework]
1834-1837 [for]
1838-1847 [analysing]
1848-1860 [unstructured]
1861-1868 [content]
1869-1873 [such]
1874-1876 [as]
1877-1881 [text]
1881-1882 [,]
1883-1888 [audio]
1889-1892 [and]
1893-1898 [video]
1898-1899 [.]
1901-2051 [It comprises an SDK and tooling for composing and running analytic components written in Java and C++, with some support for Perl, Python and TCL. 


]
1901-1903 [It]
1904-1913 [comprises]
1914-1916 [an]
1917-1920 [SDK]
1921-1924 [and]
1925-1932 [tooling]
1933-1936 [for]
1937-1946 [composing]
1947-1950 [and]
1951-1958 [running]
1959-1967 [analytic]
1968-1978 [components]
1979-1986 [written]
1987-1989 [in]
1990-1994 [Java]
1995-1998 [and]
1999-2000 [C]
2000-2001 [+]
2001-2002 [+]
2002-2003 [,]
2004-2008 [with]
2009-2013 [some]
2014-2021 [support]
2022-2025 [for]
2026-2030 [Perl]
2030-2031 [,]
2032-2038 [Python]
2039-2042 [and]
2043-2046 [TCL]
2046-2047 [.]
2051-2405 [Apache UIMA mailing lists:

Users - uima-user@incubator.apache.org
Developers - uima-dev@incubator.apache.org
Commits - uima-commits@incubator.apache.org


Apache UIMA project committers:

Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor


Apache UIMA project Mentors:

Ken Coar (ASF member and Vice President)
Sam Ruby (ASF member)
]
2051-2062 [Apache UIMA]
2051-2057 [Apache]
2058-2062 [UIMA]
2063-2070 [mailing]
2071-2076 [lists]
2076-2077 [:]
2079-2084 [Users]
2085-2086 [-]
2087-2117 [uima-user@incubator.apache.org]
2087-2096 [uima-user]
2096-2097 [@]
2097-2117 [incubator.apache.org]
2118-2128 [Developers]
2129-2130 [-]
2131-2160 [uima-dev@incubator.apache.org]
2131-2139 [uima-dev]
2139-2140 [@]
2140-2160 [incubator.apache.org]
2161-2168 [Commits]
2169-2170 [-]
2171-2204 [uima-commits@incubator.apache.org]
2171-2183 [uima-commits]
2183-2184 [@]
2184-2204 [incubator.apache.org]
2207-2218 [Apache UIMA]
2207-2213 [Apache]
2214-2218 [UIMA]
2219-2226 [project]
2227-2237 [committers]
2237-2238 [:]
2240-2309 [Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor]
2240-2247 [Michael]
2248-2256 [Baessler]
2257-2263 [Edward]
2264-2271 [Epstein]
2272-2277 [Thilo]
2278-2283 [Goetz]
2284-2288 [Adam]
2289-2294 [Lally]
2295-2303 [Marshall]
2304-2309 [Schor]
2312-2323 [Apache UIMA]
2312-2318 [Apache]
2319-2323 [UIMA]
2324-2331 [project]
2332-2339 [Mentors]
2339-2340 [:]
2342-2350 [Ken Coar]
2342-2345 [Ken]
2346-2350 [Coar]
2351-2352 [(]
2352-2355 [ASF]
2356-2362 [member]
2363-2366 [and]
2367-2381 [Vice President]
2367-2381 [Vice President]
2367-2371 [Vice]
2372-2381 [President]
2372-2381 [President]
2381-2382 [)]
2383-2391 [Sam Ruby]
2383-2386 [Sam]
2387-2391 [Ruby]
2392-2393 [(]
2393-2396 [ASF]
2397-2403 [member]
2403-2404 [)]
0-139 [﻿Welcome to Apache UIMA (Unstructured Information Management Architecture), a incubator project of the  Apache Software Foundation (ASF). 
]
0-8 [﻿Welcome]
9-11 [to]
12-23 [Apache UIMA]
12-18 [Apache]
19-23 [UIMA]
24-25 [(]
25-73 [Unstructured Information Management Architecture]
25-37 [Unstructured]
38-49 [Information]
50-60 [Management]
61-73 [Architecture]
73-74 [)]
74-75 [,]
76-77 [a]
78-87 [incubator]
88-95 [project]
96-98 [of]
99-102 [the]
104-130 [Apache Software Foundation]
104-110 [Apache]
111-119 [Software]
120-130 [Foundation]
131-132 [(]
132-135 [ASF]
135-136 [)]
136-137 [.]
139-305 [Our goal is a thriving community of users and developers of UIMA frameworks, supporting components for analysing unstructured content such as text, audio and video.

]
139-142 [Our]
143-147 [goal]
148-150 [is]
151-152 [a]
153-161 [thriving]
162-171 [community]
172-174 [of]
175-180 [users]
181-184 [and]
185-195 [developers]
196-198 [of]
199-203 [UIMA]
204-214 [frameworks]
214-215 [,]
216-226 [supporting]
227-237 [components]
238-241 [for]
242-251 [analysing]
252-264 [unstructured]
265-272 [content]
273-277 [such]
278-280 [as]
281-285 [text]
285-286 [,]
287-292 [audio]
293-296 [and]
297-302 [video]
302-303 [.]
305-320 [What is UIMA?

]
305-309 [What]
310-312 [is]
313-317 [UIMA]
317-318 [?]
320-510 [Unstructured Information Management applications are software systems that analyze large volumes of unstructured information in order to discover knowledge that is relevant to an end user. 
]
320-355 [Unstructured Information Management]
320-332 [Unstructured]
333-344 [Information]
345-355 [Management]
356-368 [applications]
369-372 [are]
373-381 [software]
382-389 [systems]
390-394 [that]
395-402 [analyze]
403-408 [large]
409-416 [volumes]
417-419 [of]
420-432 [unstructured]
433-444 [information]
445-447 [in]
448-453 [order]
454-456 [to]
457-465 [discover]
466-475 [knowledge]
476-480 [that]
481-483 [is]
484-492 [relevant]
493-495 [to]
496-498 [an]
499-502 [end]
503-507 [user]
507-508 [.]
510-572 [UIMA is a framework and SDK for developing such applications. ]
510-514 [UIMA]
515-517 [is]
518-519 [a]
520-529 [framework]
530-533 [and]
534-537 [SDK]
538-541 [for]
542-552 [developing]
553-557 [such]
558-570 [applications]
570-571 [.]
572-734 [An example UIM application might ingest plain text and identify entities, such as persons, places, organizations; or relations, such as works-for or located-at. 
]
572-574 [An]
575-582 [example]
583-586 [UIM]
587-598 [application]
599-604 [might]
605-611 [ingest]
612-617 [plain]
618-622 [text]
623-626 [and]
627-635 [identify]
636-644 [entities]
644-645 [,]
646-650 [such]
651-653 [as]
654-661 [persons]
661-662 [,]
663-669 [places]
669-670 [,]
671-684 [organizations]
684-685 [;]
686-688 [or]
689-698 [relations]
698-699 [,]
700-704 [such]
705-707 [as]
708-717 [works-for]
718-720 [or]
721-731 [located-at]
731-732 [.]
734-958 [UIMA enables such an application to be decomposed into components, for example "language identification" -> "language specific segmentation" -> "sentence boundary detection" -> "entity detection (person/place names etc.)". 
]
734-738 [UIMA]
739-746 [enables]
747-751 [such]
752-754 [an]
755-766 [application]
767-769 [to]
770-772 [be]
773-783 [decomposed]
784-788 [into]
789-799 [components]
799-800 [,]
801-804 [for]
805-812 [example]
813-814 ["]
814-822 [language]
823-837 [identification]
837-838 ["]
839-840 [-]
840-841 [>]
842-843 ["]
843-851 [language]
852-860 [specific]
861-873 [segmentation]
873-874 ["]
875-876 [-]
876-877 [>]
878-879 ["]
879-887 [sentence]
888-896 [boundary]
897-906 [detection]
906-907 ["]
908-909 [-]
909-910 [>]
911-912 ["]
912-918 [entity]
919-928 [detection]
929-930 [(]
930-936 [person]
936-937 [/]
937-942 [place]
943-948 [names]
949-952 [etc]
952-953 [.]
953-954 [)]
954-955 ["]
955-956 [.]
958-1092 [Each component must implement interfaces defined by the framework and must provide self-describing metadata via XML descriptor files. ]
958-962 [Each]
963-972 [component]
973-977 [must]
978-987 [implement]
988-998 [interfaces]
999-1006 [defined]
1007-1009 [by]
1010-1013 [the]
1014-1023 [framework]
1024-1027 [and]
1028-1032 [must]
1033-1040 [provide]
1041-1056 [self-describing]
1057-1065 [metadata]
1066-1069 [via]
1070-1073 [XML]
1074-1084 [descriptor]
1085-1090 [files]
1090-1091 [.]
1092-1163 [The framework manages these components and the data flow between them. ]
1092-1095 [The]
1096-1105 [framework]
1106-1113 [manages]
1114-1119 [these]
1120-1130 [components]
1131-1134 [and]
1135-1138 [the]
1139-1143 [data]
1144-1148 [flow]
1149-1156 [between]
1157-1161 [them]
1161-1162 [.]
1163-1301 [Components are written in Java or C++; the data that flows between components is designed for efficient mapping between these languages. 
]
1163-1173 [Components]
1174-1177 [are]
1178-1185 [written]
1186-1188 [in]
1189-1193 [Java]
1194-1196 [or]
1197-1198 [C]
1198-1199 [+]
1199-1200 [+]
1200-1201 [;]
1202-1205 [the]
1206-1210 [data]
1211-1215 [that]
1216-1221 [flows]
1222-1229 [between]
1230-1240 [components]
1241-1243 [is]
1244-1252 [designed]
1253-1256 [for]
1257-1266 [efficient]
1267-1274 [mapping]
1275-1282 [between]
1283-1288 [these]
1289-1298 [languages]
1298-1299 [.]
1301-1489 [UIMA additionally provides capabilities to wrap components as network services, and can scale to very large volumes by replicating processing pipelines over a cluster of networked nodes.

]
1301-1305 [UIMA]
1306-1318 [additionally]
1319-1327 [provides]
1328-1340 [capabilities]
1341-1343 [to]
1344-1348 [wrap]
1349-1359 [components]
1360-1362 [as]
1363-1370 [network]
1371-1379 [services]
1379-1380 [,]
1381-1384 [and]
1385-1388 [can]
1389-1394 [scale]
1395-1397 [to]
1398-1402 [very]
1403-1408 [large]
1409-1416 [volumes]
1417-1419 [by]
1420-1431 [replicating]
1432-1442 [processing]
1443-1452 [pipelines]
1453-1457 [over]
1458-1459 [a]
1460-1467 [cluster]
1468-1470 [of]
1471-1480 [networked]
1481-1486 [nodes]
1486-1487 [.]
1489-1706 [Apache UIMA is an Apache-licensed open source implementation of the UIMA specification (that specification is, in turn, being developed concurrently by a technical committee within OASIS , a standards organization). 
]
1489-1500 [Apache UIMA]
1489-1495 [Apache]
1496-1500 [UIMA]
1501-1503 [is]
1504-1506 [an]
1507-1522 [Apache-licensed]
1523-1527 [open]
1528-1534 [source]
1535-1549 [implementation]
1550-1552 [of]
1553-1556 [the]
1557-1561 [UIMA]
1562-1575 [specification]
1576-1577 [(]
1577-1581 [that]
1582-1595 [specification]
1596-1598 [is]
1598-1599 [,]
1600-1602 [in]
1603-1607 [turn]
1607-1608 [,]
1609-1614 [being]
1615-1624 [developed]
1625-1637 [concurrently]
1638-1640 [by]
1641-1642 [a]
1643-1652 [technical]
1653-1662 [committee]
1663-1669 [within]
1670-1675 [OASIS]
1676-1677 [,]
1678-1679 [a]
1680-1689 [standards]
1690-1702 [organization]
1702-1703 [)]
1703-1704 [.]
1706-1804 [We invite and encourage you to participate in both the implementation and specification efforts.

]
1706-1708 [We]
1709-1715 [invite]
1716-1719 [and]
1720-1729 [encourage]
1730-1733 [you]
1734-1736 [to]
1737-1748 [participate]
1749-1751 [in]
1752-1756 [both]
1757-1760 [the]
1761-1775 [implementation]
1776-1779 [and]
1780-1793 [specification]
1794-1801 [efforts]
1801-1802 [.]
1804-1901 [UIMA is a component framework for analysing unstructured content such as text, audio and video. 
]
1804-1808 [UIMA]
1809-1811 [is]
1812-1813 [a]
1814-1823 [component]
1824-1833 [framework]
1834-1837 [for]
1838-1847 [analysing]
1848-1860 [unstructured]
1861-1868 [content]
1869-1873 [such]
1874-1876 [as]
1877-1881 [text]
1881-1882 [,]
1883-1888 [audio]
1889-1892 [and]
1893-1898 [video]
1898-1899 [.]
1901-2051 [It comprises an SDK and tooling for composing and running analytic components written in Java and C++, with some support for Perl, Python and TCL. 


]
1901-1903 [It]
1904-1913 [comprises]
1914-1916 [an]
1917-1920 [SDK]
1921-1924 [and]
1925-1932 [tooling]
1933-1936 [for]
1937-1946 [composing]
1947-1950 [and]
1951-1958 [running]
1959-1967 [analytic]
1968-1978 [components]
1979-1986 [written]
1987-1989 [in]
1990-1994 [Java]
1995-1998 [and]
1999-2000 [C]
2000-2001 [+]
2001-2002 [+]
2002-2003 [,]
2004-2008 [with]
2009-2013 [some]
2014-2021 [support]
2022-2025 [for]
2026-2030 [Perl]
2030-2031 [,]
2032-2038 [Python]
2039-2042 [and]
2043-2046 [TCL]
2046-2047 [.]
2051-2405 [Apache UIMA mailing lists:

Users - uima-user@incubator.apache.org
Developers - uima-dev@incubator.apache.org
Commits - uima-commits@incubator.apache.org


Apache UIMA project committers:

Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor


Apache UIMA project Mentors:

Ken Coar (ASF member and Vice President)
Sam Ruby (ASF member)
]
2051-2062 [Apache UIMA]
2051-2057 [Apache]
2058-2062 [UIMA]
2063-2070 [mailing]
2071-2076 [lists]
2076-2077 [:]
2079-2084 [Users]
2085-2086 [-]
2087-2117 [uima-user@incubator.apache.org]
2087-2096 [uima-user]
2096-2097 [@]
2097-2117 [incubator.apache.org]
2118-2128 [Developers]
2129-2130 [-]
2131-2160 [uima-dev@incubator.apache.org]
2131-2139 [uima-dev]
2139-2140 [@]
2140-2160 [incubator.apache.org]
2161-2168 [Commits]
2169-2170 [-]
2171-2204 [uima-commits@incubator.apache.org]
2171-2183 [uima-commits]
2183-2184 [@]
2184-2204 [incubator.apache.org]
2207-2218 [Apache UIMA]
2207-2213 [Apache]
2214-2218 [UIMA]
2219-2226 [project]
2227-2237 [committers]
2237-2238 [:]
2240-2309 [Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor]
2240-2247 [Michael]
2248-2256 [Baessler]
2257-2263 [Edward]
2264-2271 [Epstein]
2272-2277 [Thilo]
2278-2283 [Goetz]
2284-2288 [Adam]
2289-2294 [Lally]
2295-2303 [Marshall]
2304-2309 [Schor]
2312-2323 [Apache UIMA]
2312-2318 [Apache]
2319-2323 [UIMA]
2324-2331 [project]
2332-2339 [Mentors]
2339-2340 [:]
2342-2350 [Ken Coar]
2342-2345 [Ken]
2346-2350 [Coar]
2351-2352 [(]
2352-2355 [ASF]
2356-2362 [member]
2363-2366 [and]
2367-2381 [Vice President]
2367-2381 [Vice President]
2367-2371 [Vice]
2372-2381 [President]
2372-2381 [President]
2381-2382 [)]
2383-2391 [Sam Ruby]
2383-2386 [Sam]
2387-2391 [Ruby]
2392-2393 [(]
2393-2396 [ASF]
2397-2403 [member]
2403-2404 [)]
0-139 [﻿Welcome to Apache UIMA (Unstructured Information Management Architecture), a incubator project of the  Apache Software Foundation (ASF). 
]
0-8 [﻿Welcome]
9-11 [to]
12-23 [Apache UIMA]
12-18 [Apache]
19-23 [UIMA]
24-25 [(]
25-73 [Unstructured Information Management Architecture]
25-37 [Unstructured]
38-49 [Information]
50-60 [Management]
61-73 [Architecture]
73-74 [)]
74-75 [,]
76-77 [a]
78-87 [incubator]
88-95 [project]
96-98 [of]
99-102 [the]
104-130 [Apache Software Foundation]
104-110 [Apache]
111-119 [Software]
120-130 [Foundation]
131-132 [(]
132-135 [ASF]
135-136 [)]
136-137 [.]
139-305 [Our goal is a thriving community of users and developers of UIMA frameworks, supporting components for analysing unstructured content such as text, audio and video.

]
139-142 [Our]
143-147 [goal]
148-150 [is]
151-152 [a]
153-161 [thriving]
162-171 [community]
172-174 [of]
175-180 [users]
181-184 [and]
185-195 [developers]
196-198 [of]
199-203 [UIMA]
204-214 [frameworks]
214-215 [,]
216-226 [supporting]
227-237 [components]
238-241 [for]
242-251 [analysing]
252-264 [unstructured]
265-272 [content]
273-277 [such]
278-280 [as]
281-285 [text]
285-286 [,]
287-292 [audio]
293-296 [and]
297-302 [video]
302-303 [.]
305-320 [What is UIMA?

]
305-309 [What]
310-312 [is]
313-317 [UIMA]
317-318 [?]
320-510 [Unstructured Information Management applications are software systems that analyze large volumes of unstructured information in order to discover knowledge that is relevant to an end user. 
]
320-355 [Unstructured Information Management]
320-332 [Unstructured]
333-344 [Information]
345-355 [Management]
356-368 [applications]
369-372 [are]
373-381 [software]
382-389 [systems]
390-394 [that]
395-402 [analyze]
403-408 [large]
409-416 [volumes]
417-419 [of]
420-432 [unstructured]
433-444 [information]
445-447 [in]
448-453 [order]
454-456 [to]
457-465 [discover]
466-475 [knowledge]
476-480 [that]
481-483 [is]
484-492 [relevant]
493-495 [to]
496-498 [an]
499-502 [end]
503-507 [user]
507-508 [.]
510-572 [UIMA is a framework and SDK for developing such applications. ]
510-514 [UIMA]
515-517 [is]
518-519 [a]
520-529 [framework]
530-533 [and]
534-537 [SDK]
538-541 [for]
542-552 [developing]
553-557 [such]
558-570 [applications]
570-571 [.]
572-734 [An example UIM application might ingest plain text and identify entities, such as persons, places, organizations; or relations, such as works-for or located-at. 
]
572-574 [An]
575-582 [example]
583-586 [UIM]
587-598 [application]
599-604 [might]
605-611 [ingest]
612-617 [plain]
618-622 [text]
623-626 [and]
627-635 [identify]
636-644 [entities]
644-645 [,]
646-650 [such]
651-653 [as]
654-661 [persons]
661-662 [,]
663-669 [places]
669-670 [,]
671-684 [organizations]
684-685 [;]
686-688 [or]
689-698 [relations]
698-699 [,]
700-704 [such]
705-707 [as]
708-717 [works-for]
718-720 [or]
721-731 [located-at]
731-732 [.]
734-958 [UIMA enables such an application to be decomposed into components, for example "language identification" -> "language specific segmentation" -> "sentence boundary detection" -> "entity detection (person/place names etc.)". 
]
734-738 [UIMA]
739-746 [enables]
747-751 [such]
752-754 [an]
755-766 [application]
767-769 [to]
770-772 [be]
773-783 [decomposed]
784-788 [into]
789-799 [components]
799-800 [,]
801-804 [for]
805-812 [example]
813-814 ["]
814-822 [language]
823-837 [identification]
837-838 ["]
839-840 [-]
840-841 [>]
842-843 ["]
843-851 [language]
852-860 [specific]
861-873 [segmentation]
873-874 ["]
875-876 [-]
876-877 [>]
878-879 ["]
879-887 [sentence]
888-896 [boundary]
897-906 [detection]
906-907 ["]
908-909 [-]
909-910 [>]
911-912 ["]
912-918 [entity]
919-928 [detection]
929-930 [(]
930-936 [person]
936-937 [/]
937-942 [place]
943-948 [names]
949-952 [etc]
952-953 [.]
953-954 [)]
954-955 ["]
955-956 [.]
958-1092 [Each component must implement interfaces defined by the framework and must provide self-describing metadata via XML descriptor files. ]
958-962 [Each]
963-972 [component]
973-977 [must]
978-987 [implement]
988-998 [interfaces]
999-1006 [defined]
1007-1009 [by]
1010-1013 [the]
1014-1023 [framework]
1024-1027 [and]
1028-1032 [must]
1033-1040 [provide]
1041-1056 [self-describing]
1057-1065 [metadata]
1066-1069 [via]
1070-1073 [XML]
1074-1084 [descriptor]
1085-1090 [files]
1090-1091 [.]
1092-1163 [The framework manages these components and the data flow between them. ]
1092-1095 [The]
1096-1105 [framework]
1106-1113 [manages]
1114-1119 [these]
1120-1130 [components]
1131-1134 [and]
1135-1138 [the]
1139-1143 [data]
1144-1148 [flow]
1149-1156 [between]
1157-1161 [them]
1161-1162 [.]
1163-1301 [Components are written in Java or C++; the data that flows between components is designed for efficient mapping between these languages. 
]
1163-1173 [Components]
1174-1177 [are]
1178-1185 [written]
1186-1188 [in]
1189-1193 [Java]
1194-1196 [or]
1197-1198 [C]
1198-1199 [+]
1199-1200 [+]
1200-1201 [;]
1202-1205 [the]
1206-1210 [data]
1211-1215 [that]
1216-1221 [flows]
1222-1229 [between]
1230-1240 [components]
1241-1243 [is]
1244-1252 [designed]
1253-1256 [for]
1257-1266 [efficient]
1267-1274 [mapping]
1275-1282 [between]
1283-1288 [these]
1289-1298 [languages]
1298-1299 [.]
1301-1489 [UIMA additionally provides capabilities to wrap components as network services, and can scale to very large volumes by replicating processing pipelines over a cluster of networked nodes.

]
1301-1305 [UIMA]
1306-1318 [additionally]
1319-1327 [provides]
1328-1340 [capabilities]
1341-1343 [to]
1344-1348 [wrap]
1349-1359 [components]
1360-1362 [as]
1363-1370 [network]
1371-1379 [services]
1379-1380 [,]
1381-1384 [and]
1385-1388 [can]
1389-1394 [scale]
1395-1397 [to]
1398-1402 [very]
1403-1408 [large]
1409-1416 [volumes]
1417-1419 [by]
1420-1431 [replicating]
1432-1442 [processing]
1443-1452 [pipelines]
1453-1457 [over]
1458-1459 [a]
1460-1467 [cluster]
1468-1470 [of]
1471-1480 [networked]
1481-1486 [nodes]
1486-1487 [.]
1489-1706 [Apache UIMA is an Apache-licensed open source implementation of the UIMA specification (that specification is, in turn, being developed concurrently by a technical committee within OASIS , a standards organization). 
]
1489-1500 [Apache UIMA]
1489-1495 [Apache]
1496-1500 [UIMA]
1501-1503 [is]
1504-1506 [an]
1507-1522 [Apache-licensed]
1523-1527 [open]
1528-1534 [source]
1535-1549 [implementation]
1550-1552 [of]
1553-1556 [the]
1557-1561 [UIMA]
1562-1575 [specification]
1576-1577 [(]
1577-1581 [that]
1582-1595 [specification]
1596-1598 [is]
1598-1599 [,]
1600-1602 [in]
1603-1607 [turn]
1607-1608 [,]
1609-1614 [being]
1615-1624 [developed]
1625-1637 [concurrently]
1638-1640 [by]
1641-1642 [a]
1643-1652 [technical]
1653-1662 [committee]
1663-1669 [within]
1670-1675 [OASIS]
1676-1677 [,]
1678-1679 [a]
1680-1689 [standards]
1690-1702 [organization]
1702-1703 [)]
1703-1704 [.]
1706-1804 [We invite and encourage you to participate in both the implementation and specification efforts.

]
1706-1708 [We]
1709-1715 [invite]
1716-1719 [and]
1720-1729 [encourage]
1730-1733 [you]
1734-1736 [to]
1737-1748 [participate]
1749-1751 [in]
1752-1756 [both]
1757-1760 [the]
1761-1775 [implementation]
1776-1779 [and]
1780-1793 [specification]
1794-1801 [efforts]
1801-1802 [.]
1804-1901 [UIMA is a component framework for analysing unstructured content such as text, audio and video. 
]
1804-1808 [UIMA]
1809-1811 [is]
1812-1813 [a]
1814-1823 [component]
1824-1833 [framework]
1834-1837 [for]
1838-1847 [analysing]
1848-1860 [unstructured]
1861-1868 [content]
1869-1873 [such]
1874-1876 [as]
1877-1881 [text]
1881-1882 [,]
1883-1888 [audio]
1889-1892 [and]
1893-1898 [video]
1898-1899 [.]
1901-2051 [It comprises an SDK and tooling for composing and running analytic components written in Java and C++, with some support for Perl, Python and TCL. 


]
1901-1903 [It]
1904-1913 [comprises]
1914-1916 [an]
1917-1920 [SDK]
1921-1924 [and]
1925-1932 [tooling]
1933-1936 [for]
1937-1946 [composing]
1947-1950 [and]
1951-1958 [running]
1959-1967 [analytic]
1968-1978 [components]
1979-1986 [written]
1987-1989 [in]
1990-1994 [Java]
1995-1998 [and]
1999-2000 [C]
2000-2001 [+]
2001-2002 [+]
2002-2003 [,]
2004-2008 [with]
2009-2013 [some]
2014-2021 [support]
2022-2025 [for]
2026-2030 [Perl]
2030-2031 [,]
2032-2038 [Python]
2039-2042 [and]
2043-2046 [TCL]
2046-2047 [.]
2051-2405 [Apache UIMA mailing lists:

Users - uima-user@incubator.apache.org
Developers - uima-dev@incubator.apache.org
Commits - uima-commits@incubator.apache.org


Apache UIMA project committers:

Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor


Apache UIMA project Mentors:

Ken Coar (ASF member and Vice President)
Sam Ruby (ASF member)
]
2051-2062 [Apache UIMA]
2051-2057 [Apache]
2058-2062 [UIMA]
2063-2070 [mailing]
2071-2076 [lists]
2076-2077 [:]
2079-2084 [Users]
2085-2086 [-]
2087-2117 [uima-user@incubator.apache.org]
2087-2096 [uima-user]
2096-2097 [@]
2097-2117 [incubator.apache.org]
2118-2128 [Developers]
2129-2130 [-]
2131-2160 [uima-dev@incubator.apache.org]
2131-2139 [uima-dev]
2139-2140 [@]
2140-2160 [incubator.apache.org]
2161-2168 [Commits]
2169-2170 [-]
2171-2204 [uima-commits@incubator.apache.org]
2171-2183 [uima-commits]
2183-2184 [@]
2184-2204 [incubator.apache.org]
2207-2218 [Apache UIMA]
2207-2213 [Apache]
2214-2218 [UIMA]
2219-2226 [project]
2227-2237 [committers]
2237-2238 [:]
2240-2309 [Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor]
2240-2247 [Michael]
2248-2256 [Baessler]
2257-2263 [Edward]
2264-2271 [Epstein]
2272-2277 [Thilo]
2278-2283 [Goetz]
2284-2288 [Adam]
2289-2294 [Lally]
2295-2303 [Marshall]
2304-2309 [Schor]
2312-2323 [Apache UIMA]
2312-2318 [Apache]
2319-2323 [UIMA]
2324-2331 [project]
2332-2339 [Mentors]
2339-2340 [:]
2342-2350 [Ken Coar]
2342-2345 [Ken]
2346-2350 [Coar]
2351-2352 [(]
2352-2355 [ASF]
2356-2362 [member]
2363-2366 [and]
2367-2381 [Vice President]
2367-2381 [Vice President]
2367-2371 [Vice]
2372-2381 [President]
2372-2381 [President]
2381-2382 [)]
2383-2391 [Sam Ruby]
2383-2386 [Sam]
2387-2391 [Ruby]
2392-2393 [(]
2393-2396 [ASF]
2397-2403 [member]
2403-2404 [)]
0-139 [﻿Welcome to Apache UIMA (Unstructured Information Management Architecture), a incubator project of the  Apache Software Foundation (ASF). 
]
0-8 [﻿Welcome]
9-11 [to]
12-23 [Apache UIMA]
12-18 [Apache]
19-23 [UIMA]
24-25 [(]
25-73 [Unstructured Information Management Architecture]
25-37 [Unstructured]
38-49 [Information]
50-60 [Management]
61-73 [Architecture]
73-74 [)]
74-75 [,]
76-77 [a]
78-87 [incubator]
88-95 [project]
96-98 [of]
99-102 [the]
104-130 [Apache Software Foundation]
104-110 [Apache]
111-119 [Software]
120-130 [Foundation]
131-132 [(]
132-135 [ASF]
135-136 [)]
136-137 [.]
139-305 [Our goal is a thriving community of users and developers of UIMA frameworks, supporting components for analysing unstructured content such as text, audio and video.

]
139-142 [Our]
143-147 [goal]
148-150 [is]
151-152 [a]
153-161 [thriving]
162-171 [community]
172-174 [of]
175-180 [users]
181-184 [and]
185-195 [developers]
196-198 [of]
199-203 [UIMA]
204-214 [frameworks]
214-215 [,]
216-226 [supporting]
227-237 [components]
238-241 [for]
242-251 [analysing]
252-264 [unstructured]
265-272 [content]
273-277 [such]
278-280 [as]
281-285 [text]
285-286 [,]
287-292 [audio]
293-296 [and]
297-302 [video]
302-303 [.]
305-320 [What is UIMA?

]
305-309 [What]
310-312 [is]
313-317 [UIMA]
317-318 [?]
320-510 [Unstructured Information Management applications are software systems that analyze large volumes of unstructured information in order to discover knowledge that is relevant to an end user. 
]
320-355 [Unstructured Information Management]
320-332 [Unstructured]
333-344 [Information]
345-355 [Management]
356-368 [applications]
369-372 [are]
373-381 [software]
382-389 [systems]
390-394 [that]
395-402 [analyze]
403-408 [large]
409-416 [volumes]
417-419 [of]
420-432 [unstructured]
433-444 [information]
445-447 [in]
448-453 [order]
454-456 [to]
457-465 [discover]
466-475 [knowledge]
476-480 [that]
481-483 [is]
484-492 [relevant]
493-495 [to]
496-498 [an]
499-502 [end]
503-507 [user]
507-508 [.]
510-572 [UIMA is a framework and SDK for developing such applications. ]
510-514 [UIMA]
515-517 [is]
518-519 [a]
520-529 [framework]
530-533 [and]
534-537 [SDK]
538-541 [for]
542-552 [developing]
553-557 [such]
558-570 [applications]
570-571 [.]
572-734 [An example UIM application might ingest plain text and identify entities, such as persons, places, organizations; or relations, such as works-for or located-at. 
]
572-574 [An]
575-582 [example]
583-586 [UIM]
587-598 [application]
599-604 [might]
605-611 [ingest]
612-617 [plain]
618-622 [text]
623-626 [and]
627-635 [identify]
636-644 [entities]
644-645 [,]
646-650 [such]
651-653 [as]
654-661 [persons]
661-662 [,]
663-669 [places]
669-670 [,]
671-684 [organizations]
684-685 [;]
686-688 [or]
689-698 [relations]
698-699 [,]
700-704 [such]
705-707 [as]
708-717 [works-for]
718-720 [or]
721-731 [located-at]
731-732 [.]
734-958 [UIMA enables such an application to be decomposed into components, for example "language identification" -> "language specific segmentation" -> "sentence boundary detection" -> "entity detection (person/place names etc.)". 
]
734-738 [UIMA]
739-746 [enables]
747-751 [such]
752-754 [an]
755-766 [application]
767-769 [to]
770-772 [be]
773-783 [decomposed]
784-788 [into]
789-799 [components]
799-800 [,]
801-804 [for]
805-812 [example]
813-814 ["]
814-822 [language]
823-837 [identification]
837-838 ["]
839-840 [-]
840-841 [>]
842-843 ["]
843-851 [language]
852-860 [specific]
861-873 [segmentation]
873-874 ["]
875-876 [-]
876-877 [>]
878-879 ["]
879-887 [sentence]
888-896 [boundary]
897-906 [detection]
906-907 ["]
908-909 [-]
909-910 [>]
911-912 ["]
912-918 [entity]
919-928 [detection]
929-930 [(]
930-936 [person]
936-937 [/]
937-942 [place]
943-948 [names]
949-952 [etc]
952-953 [.]
953-954 [)]
954-955 ["]
955-956 [.]
958-1092 [Each component must implement interfaces defined by the framework and must provide self-describing metadata via XML descriptor files. ]
958-962 [Each]
963-972 [component]
973-977 [must]
978-987 [implement]
988-998 [interfaces]
999-1006 [defined]
1007-1009 [by]
1010-1013 [the]
1014-1023 [framework]
1024-1027 [and]
1028-1032 [must]
1033-1040 [provide]
1041-1056 [self-describing]
1057-1065 [metadata]
1066-1069 [via]
1070-1073 [XML]
1074-1084 [descriptor]
1085-1090 [files]
1090-1091 [.]
1092-1163 [The framework manages these components and the data flow between them. ]
1092-1095 [The]
1096-1105 [framework]
1106-1113 [manages]
1114-1119 [these]
1120-1130 [components]
1131-1134 [and]
1135-1138 [the]
1139-1143 [data]
1144-1148 [flow]
1149-1156 [between]
1157-1161 [them]
1161-1162 [.]
1163-1301 [Components are written in Java or C++; the data that flows between components is designed for efficient mapping between these languages. 
]
1163-1173 [Components]
1174-1177 [are]
1178-1185 [written]
1186-1188 [in]
1189-1193 [Java]
1194-1196 [or]
1197-1198 [C]
1198-1199 [+]
1199-1200 [+]
1200-1201 [;]
1202-1205 [the]
1206-1210 [data]
1211-1215 [that]
1216-1221 [flows]
1222-1229 [between]
1230-1240 [components]
1241-1243 [is]
1244-1252 [designed]
1253-1256 [for]
1257-1266 [efficient]
1267-1274 [mapping]
1275-1282 [between]
1283-1288 [these]
1289-1298 [languages]
1298-1299 [.]
1301-1489 [UIMA additionally provides capabilities to wrap components as network services, and can scale to very large volumes by replicating processing pipelines over a cluster of networked nodes.

]
1301-1305 [UIMA]
1306-1318 [additionally]
1319-1327 [provides]
1328-1340 [capabilities]
1341-1343 [to]
1344-1348 [wrap]
1349-1359 [components]
1360-1362 [as]
1363-1370 [network]
1371-1379 [services]
1379-1380 [,]
1381-1384 [and]
1385-1388 [can]
1389-1394 [scale]
1395-1397 [to]
1398-1402 [very]
1403-1408 [large]
1409-1416 [volumes]
1417-1419 [by]
1420-1431 [replicating]
1432-1442 [processing]
1443-1452 [pipelines]
1453-1457 [over]
1458-1459 [a]
1460-1467 [cluster]
1468-1470 [of]
1471-1480 [networked]
1481-1486 [nodes]
1486-1487 [.]
1489-1706 [Apache UIMA is an Apache-licensed open source implementation of the UIMA specification (that specification is, in turn, being developed concurrently by a technical committee within OASIS , a standards organization). 
]
1489-1500 [Apache UIMA]
1489-1495 [Apache]
1496-1500 [UIMA]
1501-1503 [is]
1504-1506 [an]
1507-1522 [Apache-licensed]
1523-1527 [open]
1528-1534 [source]
1535-1549 [implementation]
1550-1552 [of]
1553-1556 [the]
1557-1561 [UIMA]
1562-1575 [specification]
1576-1577 [(]
1577-1581 [that]
1582-1595 [specification]
1596-1598 [is]
1598-1599 [,]
1600-1602 [in]
1603-1607 [turn]
1607-1608 [,]
1609-1614 [being]
1615-1624 [developed]
1625-1637 [concurrently]
1638-1640 [by]
1641-1642 [a]
1643-1652 [technical]
1653-1662 [committee]
1663-1669 [within]
1670-1675 [OASIS]
1676-1677 [,]
1678-1679 [a]
1680-1689 [standards]
1690-1702 [organization]
1702-1703 [)]
1703-1704 [.]
1706-1804 [We invite and encourage you to participate in both the implementation and specification efforts.

]
1706-1708 [We]
1709-1715 [invite]
1716-1719 [and]
1720-1729 [encourage]
1730-1733 [you]
1734-1736 [to]
1737-1748 [participate]
1749-1751 [in]
1752-1756 [both]
1757-1760 [the]
1761-1775 [implementation]
1776-1779 [and]
1780-1793 [specification]
1794-1801 [efforts]
1801-1802 [.]
1804-1901 [UIMA is a component framework for analysing unstructured content such as text, audio and video. 
]
1804-1808 [UIMA]
1809-1811 [is]
1812-1813 [a]
1814-1823 [component]
1824-1833 [framework]
1834-1837 [for]
1838-1847 [analysing]
1848-1860 [unstructured]
1861-1868 [content]
1869-1873 [such]
1874-1876 [as]
1877-1881 [text]
1881-1882 [,]
1883-1888 [audio]
1889-1892 [and]
1893-1898 [video]
1898-1899 [.]
1901-2051 [It comprises an SDK and tooling for composing and running analytic components written in Java and C++, with some support for Perl, Python and TCL. 


]
1901-1903 [It]
1904-1913 [comprises]
1914-1916 [an]
1917-1920 [SDK]
1921-1924 [and]
1925-1932 [tooling]
1933-1936 [for]
1937-1946 [composing]
1947-1950 [and]
1951-1958 [running]
1959-1967 [analytic]
1968-1978 [components]
1979-1986 [written]
1987-1989 [in]
1990-1994 [Java]
1995-1998 [and]
1999-2000 [C]
2000-2001 [+]
2001-2002 [+]
2002-2003 [,]
2004-2008 [with]
2009-2013 [some]
2014-2021 [support]
2022-2025 [for]
2026-2030 [Perl]
2030-2031 [,]
2032-2038 [Python]
2039-2042 [and]
2043-2046 [TCL]
2046-2047 [.]
2051-2405 [Apache UIMA mailing lists:

Users - uima-user@incubator.apache.org
Developers - uima-dev@incubator.apache.org
Commits - uima-commits@incubator.apache.org


Apache UIMA project committers:

Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor


Apache UIMA project Mentors:

Ken Coar (ASF member and Vice President)
Sam Ruby (ASF member)
]
2051-2062 [Apache UIMA]
2051-2057 [Apache]
2058-2062 [UIMA]
2063-2070 [mailing]
2071-2076 [lists]
2076-2077 [:]
2079-2084 [Users]
2085-2086 [-]
2087-2117 [uima-user@incubator.apache.org]
2087-2096 [uima-user]
2096-2097 [@]
2097-2117 [incubator.apache.org]
2118-2128 [Developers]
2129-2130 [-]
2131-2160 [uima-dev@incubator.apache.org]
2131-2139 [uima-dev]
2139-2140 [@]
2140-2160 [incubator.apache.org]
2161-2168 [Commits]
2169-2170 [-]
2171-2204 [uima-commits@incubator.apache.org]
2171-2183 [uima-commits]
2183-2184 [@]
2184-2204 [incubator.apache.org]
2207-2218 [Apache UIMA]
2207-2213 [Apache]
2214-2218 [UIMA]
2219-2226 [project]
2227-2237 [committers]
2237-2238 [:]
2240-2309 [Michael Baessler
Edward Epstein
Thilo Goetz
Adam Lally
Marshall Schor]
2240-2247 [Michael]
2248-2256 [Baessler]
2257-2263 [Edward]
2264-2271 [Epstein]
2272-2277 [Thilo]
2278-2283 [Goetz]
2284-2288 [Adam]
2289-2294 [Lally]
2295-2303 [Marshall]
2304-2309 [Schor]
2312-2323 [Apache UIMA]
2312-2318 [Apache]
2319-2323 [UIMA]
2324-2331 [project]
2332-2339 [Mentors]
2339-2340 [:]
2342-2350 [Ken Coar]
2342-2345 [Ken]
2346-2350 [Coar]
2351-2352 [(]
2352-2355 [ASF]
2356-2362 [member]
2363-2366 [and]
2367-2381 [Vice President]
2367-2381 [Vice President]
2367-2371 [Vice]
2372-2381 [President]
2372-2381 [President]
2381-2382 [)]
2383-2391 [Sam Ruby]
2383-2386 [Sam]
2387-2391 [Ruby]
2392-2393 [(]
2393-2396 [ASF]
2397-2403 [member]
2403-2404 [)]
